#include "ros/ros.h"
#include "tf/transform_listener.h"
#include "tf/message_filter.h"
#include "message_filters/subscriber.h"
#include "sensor_msgs/Range.h"
#include <math.h>
#include "nav_msgs/OccupancyGrid.h"
#include "std_msgs/Int8MultiArray.h"
#include <boost/numeric/ublas/vector.hpp>
#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/io.hpp>


geometry_msgs::PointStamped point_out[3];

class PoseDrawer
{
public:
	PoseDrawer() : tf_(),	target_frame_("map")
	{
		point_sub_.subscribe(n_, "range", 100);
		tf_filter_ = new tf::MessageFilter<sensor_msgs::Range>(point_sub_, tf_, target_frame_, 10);
		tf_filter_->registerCallback( boost::bind(&PoseDrawer::msgCallback, this, _1) );
		sub_map = n_.subscribe("map", 1000, &PoseDrawer::mapCallback, this);
	} ;

private:
	message_filters::Subscriber<sensor_msgs::Range> point_sub_;
	tf::TransformListener tf_;
	tf::MessageFilter<sensor_msgs::Range> * tf_filter_;
	ros::NodeHandle n_;
	std::string target_frame_;
	
	ros::Subscriber sub_map;
	nav_msgs::OccupancyGrid map;
	std_msgs::Int8MultiArray occu_data;

	// pt0, pt1, pt2の三点で作られる三角形内に点ptがあるかどうかを判定
	bool detectInOutTriangle(geometry_msgs::Point& pt0, geometry_msgs::Point& pt1, \
							 geometry_msgs::Point& pt2, geometry_msgs::Point& pt)
	{
		tf::Vector3 vec_ab = tf::Vector3(pt1.x - pt0.x, pt1.y - pt0.y, pt1.z - pt0.z));
		vector<double> vec_bc(3);
		vector<double> vec_ca(3);
		vec_ab(1) = pt1.x - pt0.x;
		vec_ab(2) = pt1.y - pt0.y;
		vec_ab(3) = pt1.z - pt0.z;
		vec_bc(1) = pt2.x - pt1.x;
		vec_bc(2) = pt2.y - pt1.y;
		vec_bc(3) = pt2.z - pt1.z;
		vec_ca(1) = pt0.x - pt2.x;
		vec_ca(2) = pt0.y - pt2.y;
		vec_ca(3) = pt0.z - pt2.z;

		vector<double> vec_bp(3);
		vector<double> vec_cp(3);
		vector<double> vec_ap(3);
		vec_bp(1) = pt1.x - pt.x;
		vec_bp(2) = pt1.y - pt.y;
		vec_bp(3) = pt1.z - pt.z;
		vec_cp(1) = pt2.x - pt.x;
		vec_cp(2) = pt2.y - pt.y;
		vec_cp(3) = pt2.z - pt.z;
		vec_ap(1) = pt0.x - pt.x;
		vec_ap(2) = pt0.y - pt.y;
		vec_ap(3) = pt0.z - pt.z;

		outer_prod(vec_ab,vec_bp);
/*
		if(inner_prod(outer_prod(vec_ab,vec_bp), outer_prod(vec_bc,vec_cp)) >= 0 \
		   && inner_prod(outer_prod(vec_ab,vec_bp), outer_prod(vec_ca,vec_ap)) >= 0)
		{
			return true;
		}
		else
		{
			return false;
		}
*/
	} 

	//	Callback to register with tf::MessageFilter to be called when transforms are available
	void msgCallback(const boost::shared_ptr<const sensor_msgs::Range>& msg) 
	{
		geometry_msgs::Point pti;;
		double range = msg->range;
		double field_of_view = msg->field_of_view;
		geometry_msgs::PointStamped point_in[3];
		

		point_in[0].header.frame_id = "thermocam_link";
		point_in[0].point.x = 0.0;
		point_in[0].point.y = 0.0;
		point_in[0].point.z = 0.0;
		point_in[1].header.frame_id = "thermocam_link";
		point_in[1].point.x = range;
		point_in[1].point.y = -range*tan(field_of_view/2);
		point_in[1].point.z = 0.0;
		point_in[2].header.frame_id = "thermocam_link";
		point_in[2].point.x = range;
		point_in[2].point.y = range*tan(field_of_view/2);
		point_in[2].point.z = 0.0;

		try 
		{
			for(int i = 0; i < 3; i++)
				tf_.transformPoint(target_frame_, point_in[i], point_out[i]);
			//tf_.transformPoint(target_frame_, point_in, point_out);
			/*
			printf("point of turtle 3 in frame of turtle 1 Position(x:%f y:%f z:%f)\n", 
						 point_out.point.x,
						 point_out.point.y,
						 point_out.point.z);
			*/
		}
		catch (tf::TransformException &ex) 
		{
			printf ("Failure %s\n", ex.what()); //Print exception which was caught
		}

		for(int i = 0; i < map.info.width * map.info.height; i++)
		{
			pti.x = map.info.origin.position.x + (i%map.info.width)*map.info.resolution + map.info.resolution/2;
			pti.y = map.info.origin.position.y + (i/map.info.width)*map.info.resolution + map.info.resolution/2;

			if(this->detectInOutTriangle(point_in[0].point, point_in[1].point, point_in[2].point, pti))
			{
				map.data[i] = occu_data.data[i];
			}
		}
	};

	

	void mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)
	{
		map.header.frame_id = msg->header.frame_id;
		map.header.stamp = msg->header.stamp;

		map.info.map_load_time = msg->info.map_load_time;
		map.info.width = msg->info.width;
		map.info.height = msg->info.height;
		map.info.resolution = msg->info.resolution;
		map.info.origin.position.x = msg->info.origin.position.x;
		map.info.origin.position.y = msg->info.origin.position.y;
		map.info.origin.position.z = msg->info.origin.position.z;
		map.info.origin.orientation.x = msg->info.origin.orientation.x;
		map.info.origin.orientation.y = msg->info.origin.orientation.y;
		map.info.origin.orientation.z = msg->info.origin.orientation.z;
		map.info.origin.orientation.w = msg->info.origin.orientation.w;

		//ROS_INFO("%d %d", map.info.width, map.info.height);//debug

		map.data.resize(map.info.width * map.info.height);
		for(int i = 0; i < map.info.width * map.info.height; i++)
		{	
			map.data[i] = -1;
		}
	
		occu_data.data.resize(map.info.width * map.info.height);
		for(int i = 0; i < map.info.width * map.info.height; i++)
		{	
			occu_data.data[i] = msg->data[i];
		}
	}
};



int main(int argc, char ** argv)
{
	ros::init(argc, argv, "pose_drawer"); //Init ROS
	PoseDrawer pd; //Construct class

	ros::NodeHandle n;
	ros::Publisher pub_pts0 = n.advertise<geometry_msgs::PointStamped>("point0", 1000);
	ros::Publisher pub_pts1 = n.advertise<geometry_msgs::PointStamped>("point1", 1000);
	ros::Publisher pub_pts2 = n.advertise<geometry_msgs::PointStamped>("point2", 1000);
	


	//ros::spin(); // Run until interupted 
	ros::Rate loop_rate(100);
	while (ros::ok())
	{	
		pub_pts0.publish(point_out[0]);
		pub_pts1.publish(point_out[1]);
		pub_pts2.publish(point_out[2]);

		ros::spinOnce();

		loop_rate.sleep();
	}
};
