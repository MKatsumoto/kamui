/* Auto-generated by genmsg_cpp for file /home/kamui/catkin_ws/src/can_msgs/msg/CANFrame.msg */
#ifndef CAN_MSGS_MESSAGE_CANFRAME_H
#define CAN_MSGS_MESSAGE_CANFRAME_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace can_msgs
{
template <class ContainerAllocator>
struct CANFrame_ {
  typedef CANFrame_<ContainerAllocator> Type;

  CANFrame_()
  : stamp()
  , id(0)
  , data()
  {
  }

  CANFrame_(const ContainerAllocator& _alloc)
  : stamp()
  , id(0)
  , data(_alloc)
  {
  }

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef uint16_t _id_type;
  uint16_t id;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  data;


  typedef boost::shared_ptr< ::can_msgs::CANFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_msgs::CANFrame_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CANFrame
typedef  ::can_msgs::CANFrame_<std::allocator<void> > CANFrame;

typedef boost::shared_ptr< ::can_msgs::CANFrame> CANFramePtr;
typedef boost::shared_ptr< ::can_msgs::CANFrame const> CANFrameConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::can_msgs::CANFrame_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::can_msgs::CANFrame_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace can_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::can_msgs::CANFrame_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::can_msgs::CANFrame_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::can_msgs::CANFrame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d7c21f9239abf11c681ba573103fc744";
  }

  static const char* value(const  ::can_msgs::CANFrame_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd7c21f9239abf11cULL;
  static const uint64_t static_value2 = 0x681ba573103fc744ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_msgs::CANFrame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "can_msgs/CANFrame";
  }

  static const char* value(const  ::can_msgs::CANFrame_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::can_msgs::CANFrame_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# CAN Frame\n\
time stamp\n\
\n\
uint16 id\n\
uint8[] data\n\
\n\
";
  }

  static const char* value(const  ::can_msgs::CANFrame_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::can_msgs::CANFrame_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stamp);
    stream.next(m.id);
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CANFrame_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_msgs::CANFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::can_msgs::CANFrame_<ContainerAllocator> & v) 
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CAN_MSGS_MESSAGE_CANFRAME_H

